{"version":3,"sources":["services/api.js","Components/searchbar/Searchbar.module.css","pages/moviesPage/MoviesPage.module.css","lib/parseQueryString.js","Components/searchbar/Searchbar.js","pages/moviesPage/MoviesPage.js"],"names":["KEY","BASE_URL","chageWordEnum","CREDITS","REVIEWS","searchApi","getTrendingApi","a","axios","get","response","data","results","getSearchInputApi","query","then","res","getMovieDetailsApi","movieId","getCastReviewApi","chageWord","module","exports","parseQueryString","queryStr","URLSearchParams","Object","fromEntries","entries","Searchbar","state","search","handleChange","evt","setState","target","value","console","log","handleSubmit","preventDefault","props","searchProducts","serch","this","className","styles","SearchForm","onSubmit","type","SearchFormButton","SearchFormButtonLabel","SearchFormInput","autoComplete","autoFocus","placeholder","onChange","name","Component","MoviesPage","handleSearch","location","term","history","push","prevProps","prevState","list","map","item","moviePageLink","to","pathname","id","from","img","src","poster_path","alt","original_title","title"],"mappings":"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","file":"static/js/4.abc9243d.chunk.js","sourcesContent":["import axios from \"axios\";\n\nconst KEY = \"c07e91d5d5c572c0bf5dabe0ae7a4fc6\";\nconst BASE_URL = \"https://api.themoviedb.org/3\";\n\nexport const chageWordEnum = {\n  CREDITS: \"credits\",\n  REVIEWS: \"reviews\",\n};\n\nconst getTrendingApi = async () => {\n  const response = await axios.get(\n    `${BASE_URL}/trending/movie/week?api_key=${KEY}`\n  );\n  return response.data.results;\n};\n\nconst getSearchInputApi = (query) => {\n  return axios\n    .get(\n      `${BASE_URL}/search/movie?api_key=${KEY}&query=${query}&language=en-US&page=1&include_adult=false`\n    )\n    .then((res) => res.data.results);\n};\n\nconst getMovieDetailsApi = async (movieId) => {\n  const response = await axios.get(\n    `${BASE_URL}/movie/${movieId}?api_key=${KEY}`\n  );\n  return { ...response.data };\n};\n\nconst getCastReviewApi = async (movieId, chageWord) => {\n  const response = await axios.get(\n    `${BASE_URL}/movie/${movieId}/${chageWord}?api_key=${KEY}`\n  );\n  return response.data;\n};\n\nconst searchApi = {\n  getTrendingApi,\n  getSearchInputApi,\n  getMovieDetailsApi,\n  getCastReviewApi,\n};\n\nexport default searchApi;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Searchbar\":\"Searchbar_Searchbar__FWNRa\",\"SearchForm\":\"Searchbar_SearchForm__1h9lw\",\"SearchFormButton\":\"Searchbar_SearchFormButton__2KO0A\",\"SearchFormButtonLabel\":\"Searchbar_SearchFormButtonLabel__88C7g\",\"SearchFormInput\":\"Searchbar_SearchFormInput__RvG8d\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"MoviesPage_list__3Prxv\",\"item\":\"MoviesPage_item__kckBf\",\"img\":\"MoviesPage_img__3eIBH\",\"moviePageLink\":\"MoviesPage_moviePageLink__1caEh\"};","const parseQueryString = (query = {}) => {\n  const queryStr = new URLSearchParams(query);\n  return Object.fromEntries(queryStr.entries());\n};\n\nexport default parseQueryString;\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport styles from \"./Searchbar.module.css\";\n\nclass Searchbar extends Component {\n  static propTypes = {\n    searchProducts: PropTypes.func.isRequired,\n  };\n\n  state = {\n    search: \"\",\n  };\n\n  handleChange = (evt) => {\n    this.setState({ search: evt.target.value });\n    console.log(evt.target.value);\n  };\n\n  handleSubmit = (evt) => {\n    evt.preventDefault();\n    this.props.searchProducts(this.state.search);\n\n    this.setState({ serch: \"\" });\n  };\n  render() {\n    const { search } = this.state;\n    return (\n      <header className={styles.Searchbar}>\n        <form className={styles.SearchForm} onSubmit={this.handleSubmit}>\n          <button type=\"submit\" className={styles.SearchFormButton}>\n            <span className={styles.SearchFormButtonLabel}>Search</span>\n          </button>\n\n          <input\n            className={styles.SearchFormInput}\n            type=\"text\"\n            autoComplete=\"off\"\n            autoFocus\n            placeholder=\"Search images and photos\"\n            onChange={this.handleChange}\n            value={search}\n            name=\"search\"\n          />\n        </form>\n      </header>\n    );\n  }\n}\n\nexport default Searchbar;\n","import React, { Component } from \"react\";\nimport parseQueryString from \"../../lib/parseQueryString\";\nimport Searchbar from \"../../Components/searchbar/Searchbar\";\nimport { Link } from \"react-router-dom\";\nimport styles from \"./MoviesPage.module.css\";\nimport searchApi from \"../../services/api\";\n\nclass MoviesPage extends Component {\n  state = { data: [], query: \"\" };\n\n  componentDidMount() {\n    const currentQuery = parseQueryString(this.props.location.search).query;\n    if (currentQuery) {\n      this.handleSearch();\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const query = parseQueryString(prevProps.location.search).query;\n    const currentQuery = parseQueryString(this.props.location.search).query;\n\n    if (query !== currentQuery) {\n      this.handleSearch();\n    }\n  }\n\n  handleSearch = async () => {\n    const { location } = this.props;\n    const query = parseQueryString(location.search).query;\n    searchApi\n      .getSearchInputApi(query)\n      .then((data) => this.setState({ data, query }));\n  };\n\n  handleChange = (evt) => {\n    this.setState({ query: evt.target.value });\n  };\n\n  handleSubmit = (term) => {\n    const { history, location } = this.props;\n    const query = parseQueryString(location.search).query;\n    if (!term || term === query) {\n      return;\n    }\n\n    history.push(`/movies?query=${term}`);\n  };\n\n  render() {\n    const { data } = this.state;\n    return (\n      <>\n        <Searchbar searchProducts={this.handleSubmit} />\n        <ul className={styles.list}>\n          {data.map((item) => (\n            <li className={styles.item} key={item.id}>\n              <Link\n                className={styles.moviePageLink}\n                to={{\n                  pathname: `/movies/${item.id}`,\n                  state: {\n                    from: this.props.location.pathname,\n                    query: this.state.query,\n                  },\n                }}\n              >\n                <img\n                  className={styles.img}\n                  src={\n                    item.poster_path\n                      ? `https://image.tmdb.org/t/p/w300${item.poster_path}`\n                      : `https://cdn.pixabay.com/photo/2016/12/14/23/08/page-not-found-1907792_960_720.jpg`\n                  }\n                  alt=\"\"\n                />\n                <p>{item.original_title || item.title}</p>\n              </Link>\n            </li>\n          ))}\n        </ul>\n      </>\n    );\n  }\n}\n\nexport default MoviesPage;\n"],"sourceRoot":""}